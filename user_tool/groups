# This configuration file follows a specific structure for defining groups of system calls with parameters:
# - Arguments must be defined before groups with "a:" and "()" brackets.
# - Parameters are allowed only within groups and are specified with "p:" and "[]" brackets.
# - Each group starts with the system call number on each line and are specified with "g:" and "{}" brackets.
# - Parameters are asked sequentially, they need to end with "?".
# - Each grouping can use a default questions for when no match occurs, specified with "d:".
# - Once all arguments for a system call hit, the question is thrown.
# - Values for parameter must be declared as arguments and assigned using "=".

# --- Arguments Normal Files ---

a: open-flags-readonly (
  O_RDONLY	
)

a: open-flags-write-normal (
  O_WRONLY	
  O_RDWR
  O_TRUNC
  O_APPEND
)

a: open-flags-create (
  O_CREAT
  O_RDONLY
  O_WRONLY	
  O_RDWR			
)


# --- Arguments Communication ---

a: socket-domain-internet (
  AF_INET
  AF_INET6
)

a: socket-domain-intern (
  AF_UNIX
  AF_FILE
  AF_NETLINK
)

a: socket-type-tcp (
  SOCK_STREAM
)

a: socket-type-udp (
  SOCK_DGRAM
)

a: socket-type-any (
  SOCK_STREAM 
  SOCK_DGRAM
  SOCK_RAW
)

# --- Grouping Normal Files ---

g: AccessFile {
  d: Do you allow access to the following file

  2 open(const char *pathname, int flags, .../* mode_t mode */ );
  85 creat(const char *pathname, mode_t mode);
  257 openat(int dirfd, const char *pathname, int flags, .../* mode_t mode */ );
  437 openat2(int dirfd, const char *pathname, const struct open_how *how, size_t size);
  303 name_to_handle_at(int dirfd, const char *pathname, struct file_handle *handle, int *mount_id, int flags);
  
  p: Do you allow read only access to the following file? [
    flags = open-flags-readonly
  ]

  p: Do you allow writing to the following file? [
    flags = open-flags-write-normal
  ]

  p: Do you allow the creation and access of the following file? [
    flags = open-flags-create
  ]
}

g: ChangeNameFile {
  d: Do you allow changing name or location of the following file
  
  82 rename(const char *oldpath, const char *newpath);
  264 renameat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath);
  316 renameat2(int olddirfd, const char *oldpath, int newdirfd, const char *newpath, unsigned int flags);  
}

g: CreateHardOrSoftLink {
  d: Do you allow the creation of a hard link or symbolic link to the following file

  86 link(const char *oldpath, const char *newpath);
  265 linkat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath, int flags);
  88 symlink(const char *target, const char *linkpath);
  266 symlinkat(const char *target, int newdirfd, const char *linkpath);
}

g: DeleteFile {
  d: Do you allow the deletion of the following file

  87 unlink(const char *pathname);
  263 unlinkat(int dirfd, const char *pathname, int flags);

}

g: DirectoryCreateOrDelete {
  d: Do you allow the creation or deletion of the following directory

  83 mkdir(const char *pathname, mode_t mode);
  258 mkdirat(int dirfd, const char *pathname, mode_t mode);
  84 rmdir(const char *pathname);
}

g: SpecialFiles {
  d: Do you allow the creation of the following special file

  133 mknod(const char *pathname, mode_t mode, dev_t dev);
  259 mknodat(int dirfd, const char *pathname, mode_t mode, dev_t dev);
}

# --- Grouping Communication ---

g: PipeCommunication {
  d: Do you allow communication between processes using pipes
  
  22 pipe(int pipefd[2])
  293 pipe2(int pipefd[2], int flags)
}

g: SocketCommunication {
  d: Do you allow communication using sockets

  41 socket(int domain, int type, int protocol)
  53 socketpair(int domain, int type, int protocol, int sv[2])

  p: Do you allow communication over the internet, connection-oriented? [
    domain = socket-domain-internet
    type = socket-type-tcp
  ]

  p: Do you allow communication over the internet, connectionless? [
    domain = socket-domain-internet
    type = socket-type-udp
  ]

  p: Do you allow local communication using sockets? [
    domain = socket-domain-intern
    type = socket-type-any
  ]

}

g: MessageQueueCommunication {
  d: Do you allow communication using message queue

  68 msgget(key_t key, int msgflg)
  240 mqd_t mq_open(const char *name, int oflag)
}

g: SharedMemoryCommunication {
  d: Do you allow communication using shared memory
  
  29 shmget(key_t key, size_t size, int shmflg)
}